# 题面
给你一个大小为 $2*n \times 2*n$ 的棋盘，即它有 $2*n$ 行和 $2*n$ 列。棋盘的行从下往上依次为 $-n$ 至 $n$ 。棋盘的列数从左到右依次为 $-n$ 至 $n$ 。符号 $(r, c)$ 表示位于第 $r$ 行和第 $c$ 列的单元格。

在位置 $(0, 0)$ 有一个国王棋子，它想要尽快到达位置 $(a, b)$ 。在这个问题中，我们的国王是跛脚的。每一秒钟，国王都会下出以下五步棋中的一步。

- 跳棋。国王的位置保持不变。
- 上一步。如果国王当前的位置是 $(r, c)$ ，他将下到位置 $(r + 1, c)$ 。
- 下一步位置从 $(r, c)$ 变为 $(r - 1, c)$ 。
- 向右转。位置从 $(r, c)$ 变到 $(r, c + 1)$ 。
- 向左位置从 $(r, c)$ 移动到 $(r, c - 1)$ 。

国王不允许***将他置于棋盘之外的棋步。国王跛脚的重要后果是，他***不允许***在连续两秒内走相同的棋步。例如，如果国王向右走，下一秒他只能跳过、向上、向下或向左。

跛脚国王到达位置 $(a, b)$ 最少需要多少秒？

solution的主函数如下：  
```cpp
class Solution {
public:
    int solve(int &n, int &a, int &b) {
        // write your code here
    }
};
```
其中：  
- `n`是一个整数，表示棋盘的大小。
- `a`和`b`是两个整数，表示目标位置的坐标。
- 函数应返回一个整数，表示国王到达目标位置所需的最少秒数。

# 示例 1  
- 输入：  
n = 100
a = -4
b = 1
- 输出：  
7

# 约束条件  
- $1 \leq n\leq 100000$
- $-n \leq a \leq n$
- $-n \leq b \leq n$
- 时间限制：1000 ms  
- 内存限制：64 KB  