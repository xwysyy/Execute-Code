# Problem Statement:
You are given a checkerboard of size $2*n \times 2*n$, i.Â e. it has $2*n$ rows and $2*n$ columns. The rows of this checkerboard are numbered from $-n$ to $n$ from bottom to top. The columns of this checkerboard are numbered from $-n$ to $n$ from left to right. The notation $(r, c)$ denotes the cell located in the $r$\-th row and the $c$\-th column.

There is a king piece at position $(0, 0)$ and it wants to get to position $(a, b)$ as soon as possible. In this problem our king is lame. Each second, the king makes exactly one of the following five moves.

-   Skip move. King's position remains unchanged.
-   Go up. If the current position of the king is $(r, c)$ he goes to position $(r + 1, c)$.
-   Go down. Position changes from $(r, c)$ to $(r - 1, c)$.
-   Go right. Position changes from $(r, c)$ to $(r, c + 1)$.
-   Go left. Position changes from $(r, c)$ to $(r, c - 1)$.

King is **not allowed** to make moves that put him outside of the board. The important consequence of the king being lame is that he is **not allowed** to make the same move during two consecutive seconds. For example, if the king goes right, the next second he can only skip, go up, down, or left.

What is the minimum number of seconds the lame king needs to reach position $(a, b)$?

The main function of the solution is defined as: 
```cpp
class Solution {
    int solve(int &n, int &a, int &b) {
        // write your code here
    }
};
```
Where:  
- `n` is an integer representing the size of the chessboard.  
- `a` and `b` are integers representing the target position coordinates.  
- The function should return an integer representing the minimum time (in seconds) required for the king to reach the target position.

# Example 1
- Input:  
n = 100  
a = -4  
b = 1  
- Output:  
7

# Constraints:
- $0 < n \leq 100000$  
- $-n \leq a \leq n$  
- $-n \leq b \leq n$  
- Time limit: 1000 ms  
- Memory limit: 640 KB