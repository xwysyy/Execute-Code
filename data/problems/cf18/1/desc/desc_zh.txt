# 题面
你有一个长度为 $n$ 的整数数组 $a$ 。你可以进行两种操作。

- 从 $a$ 中删除一个整数。这个操作的代价是 $c$ 。
- 在 $a$ 的任意位置（前方、后方或任意两个连续元素之间）插入一个任意正整数 $x$ 。这个操作的代价是 $d$ 。

你想让最终数组成为任意正长度的排列。请输出这样做的最小代价。注意，在操作过程中可以将数组置空，但最终数组必须至少包含一个整数。

长度为 $n$ 的排列是由 $n$ 个不同的整数组成的数组，这些整数从 $1$ 到 $n$ 按任意顺序排列。例如， $[2,3,1,5,4]$ 是一个排列，但 $[1,2,2]$ 不是一个排列（ $2$ 在数组中出现了两次）， $[1,3,4]$ 也不是一个排列（ $n=3$ ，但数组中有 $4$ ）。

solution的主函数如下：  
```cpp
class Solution {
public:
    long long solve(int &n, int &c, int &d, vector<int> &a) {   
        // write your code here
    }
};
```
其中：  
- 返回值：返回64位整数类型的最小代价

# 示例 1  
- 输入：  
n = 3, c = 3, d = 3
a = [1, 2, 3]
- 输出：  
0

# 约束条件  
- $1 \leq n \leq 1000000$
- $1 \leq c, d \leq 10^9$
- $1 \leq a[i] \leq 10^9$
- 时间限制：1000 ms  
- 内存限制：640 KB  