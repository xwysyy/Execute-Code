# 题面
给定一个长度为 $n$ 的二进制字符串 $s$ ，由 0 和 1 字符组成。

在表格的第一行写入原始字符串 $s$ 。在表的第二行写入字符串 $s$ 向右循环移动一个。在表格的第三行，写入字符串 $s$ 向右循环移动 2 次。以此类推。因此，编号为 $k$ 的一行将包含字符串 $s$ 右移 $k$ 的循环移动。行**的编号从 $0$ 到 $n - 1$ ，从上到下**。

在得到的表格中，我们需要找出面积最大的只由 1 组成的矩形。

我们称矩形为表格中所有单元格 $(i, j)$ 的集合，其中 $x_1 \le i \le x_2$ 和 $y_1 \le j \le y_2$ 为某个整数 $0 \le x_1 \le x_2 < n$ 和 $0 \le y_1 \le y_2 < n$ 。

回想一下，字符串 $s$ 右移 $k$ 的循环移动就是字符串 $s_{n-k+1} \ldots s_n s_1 s_2 \ldots s_{n-k}$ 。例如，字符串 "01011 "向右循环移动 $0$ 即为字符串 "01011"，向右循环移动 $3$ 即为字符串 "01101"。

solution的主函数如下：  
```cpp
class Solution {
public:
    long long solve(string &s) {   
        // write your code here
    }
};
```
其中：  
- 返回值是最大矩形的面积，使用 $64$ 位整数类型存储。

# 示例 1：  
- 输入：  
s = "101" 
- 输出：  
2

# 约束条件：  
- $1 \leq s.length \leq 100000$
- 时间限制：1000 ms  
- 内存限制：640 KB  