# Problem Statement
You are given an array of positive integers $a_1, a_2, \ldots, a_n$.

Make the product of all the numbers in the array (that is, $a_1 \cdot a_2 \cdot \ldots \cdot a_n$) divisible by $2^n$.

You can perform the following operation as many times as you like:

- select an arbitrary index $i$ ($1 \leq i \leq n$) and replace the value $a_i$ with $a_i=a_i \cdot i$.

You cannot apply the operation repeatedly to a single index. In other words, all selected values of $i$ must be different.

Find the smallest number of operations you need to perform to make the product of all the elements in the array divisible by $2^n$. Note that such a set of operations does not always exist.

The main function of the solution is defined as: 
```cpp
class Solution {
public:
    int solve(int &n, vector<int> &a) {   
        // write your code here
    }
};
```
Where:  
- `n` is an integer representing the size of the array.  
- `a` is a vector of integers, representing the given array.  
- The function should return an integer, representing the minimum number of operations required to make the product divisible by \(2^n\), or \(-1\) if it is not possible.

# Example 1:
- Input:  
n = 2  
a = [3, 2]
- Output:  
1

# Constraints:
- $1 \leq n \leq 100000$ 
- $1 \leq a_i \leq 10^9$  
- Time limit: 1000 ms  
- Memory limit: 6400 KB