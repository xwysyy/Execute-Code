# 题面
给你一个正整数数组 $a_1, a_2, \ldots, a_n$ 。

求数组中所有数字的乘积（即 $a_1 \cdot a_2 \cdot \ldots \cdot a_n$ ）能被 $2^n$ 整除。

你可以任意多次进行下面的运算：

- 选择任意索引 $i$ ( $1 \leq i \leq n$ ) 并将数值 $a_i$ 替换为 $a_i=a_i \cdot i$ 。

不能对单个索引重复执行该操作。换句话说， $i$ 的所有选中值必须不同。

找出使数组中所有元素的乘积都能被 $2^n$ 整除所需的最小运算次数。请注意，这样一组运算并不总是存在。

solution的主函数如下：  
```cpp
class Solution {
public:
    int solve(int &n, vector<int> &a) {   
        // write your code here
    }
};
```
其中：  
- `n` 表示数组的长度。
- `a` 表示数组的元素。
- 返回值为一个整数，表示使数组中所有元素的乘积都能被 $2^n$ 整除所需的最小运算次数。

# 示例 1  
- 输入：  
n = 2
a = 3 2
- 输出：  
1

# 约束条件  
- $1 \leq n \leq 100000$
- $1 \leq a_i \leq 10^9$
- 时间限制：1000 ms  
- 内存限制：640 KB  