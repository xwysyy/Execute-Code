# Problem Statement
Gridlandia has been hit by flooding and now has to reconstruct all of it's cities. Gridlandia can be described by an $n \times m$ matrix.

Initially, all of its cities are in economic collapse. The government can choose to rebuild certain cities. Additionally, any collapsed city which has at least one vertically neighboring rebuilt city and at least one horizontally neighboring rebuilt city can ask for aid from them and become rebuilt **without help from the government**. More formally, collapsed city positioned in $(i, j)$ can become rebuilt if **both** of the following conditions are satisfied:

-   At least one of cities with positions $(i + 1, j)$ and $(i - 1, j)$ is rebuilt;
-   At least one of cities with positions $(i, j + 1)$ and $(i, j - 1)$ is rebuilt.

If the city is located on the border of the matrix and has only one horizontally or vertically neighbouring city, then we consider only that city.

The government wants to know the minimum number of cities it has to rebuild such that **after some time** all the cities can be rebuild.

The main function of the solution is defined as:  
```cpp
class Solution {
public:
    int solve(int &n, int &m) { 
        // write your code here
    }
};
```
where:  
- `n` is the column number of the cities, and `m` is the row number of the cities
- return the minimum number of cities that need to be rebuilt

# Example 1:  
- Input:  
n = 2, m = 2
- Output:  
2

# Constraints:  
- $1 \leq n, m \leq 100000000$
- Time limit: 1000 ms  
- Memory limit: 64 KB  