# 题面
Gridlandia 遭受了洪水袭击，现在必须重建所有城市。Gridlandia 可以用一个 $n \times m$ 矩阵来描述。

起初，所有城市都处于经济崩溃状态。政府可以选择重建某些城市。此外，任何崩溃的城市，如果至少有一个垂直相邻的重建城市和至少有一个水平相邻的重建城市，就可以向它们请求援助，并在没有政府帮助的情况下**重建。更正式地说，如果满足以下两个条件，位于 $(i, j)$ 中的坍塌城市就可以重建：

- 位置为 $(i + 1, j)$ 和 $(i - 1, j)$ 的城市中至少有一个被重建；
- 位置为 $(i, j + 1)$ 和 $(i, j - 1)$ 的城市中至少有一个被重建。

如果城市位于矩阵的边界上，并且只有一个水平或垂直相邻的城市，那么我们只考虑该城市。

政府想知道至少要重建多少个城市，才能在**一段时间后**重建所有城市。

solution的主函数如下：  
```cpp
class Solution {
public:
    int solve(int &n, int &m) { 
        // write your code here
    }
};
```
其中：  
- `n` 是城市的行数，`m` 是城市的列数
- 返回至少需要重建的城市数量

# 示例 1：  
- 输入：  
n = 2, m = 2
- 输出：  
2

# 约束条件：  
- $1 \leq n, m \leq 100000000$
- 时间限制：1000 ms  
- 内存限制：64 KB  