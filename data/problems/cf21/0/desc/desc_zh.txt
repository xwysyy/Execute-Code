# 题面
Karina 有一个由 $n$ 个整数 $a_1, a_2, a_3, \dots, a_n$ 组成的数组。她喜欢数字相乘，因此她认为一对数字的美在于它们的乘积。而数组的美就是数组中一对**相邻**元素的最大美。

例如，对于 $n = 4$ ， $a=[3, 5, 7, 4]$ ，数组的美是 $\max$ （ $3 \cdot 5$ ， $5 \cdot 7$ ， $7 \cdot 4$ ）= $\max$ （ $15$ ， $35$ ， $28$ ）= $35$ 。

Karina 希望她的阵列越漂亮越好。为了实现这个目标，她可以从数组中删除一些元素（可能是零）。当 Karina 删除所有想要删除的元素后，数组中必须至少包含两个元素。

不幸的是，Karina 没有足够的时间来完成所有的任务，所以她要求你计算出她删除任意数量的元素（可能是零）后，数组的最大美观度。

solution的主函数如下：  
```cpp
class Solution {
public:
    long long solve(int &n, vector<int> &a) {   
        // write your code here
    }
};
```
其中：  
- 返回值是64位整数类型的最大美观度

# 示例 1：  
- 输入：  
n = 4
a = [5, 0, 2, 1]
- 输出：  
10

# 约束条件：  
- $2 \leq n \leq 100000$  
- $-10^9 \leq a_i \leq 10^9$
- 时间限制：1000 ms  
- 内存限制：6400 KB  