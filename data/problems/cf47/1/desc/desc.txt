# Problem Statement
In Berland, a bus consists of a row of $n$ seats numbered from $1$ to $n$. Passengers are advised to always board the bus following these rules:

-   If there are no occupied seats in the bus, a passenger can sit in any free seat;
-   Otherwise, a passenger should sit in any free seat that has at least one occupied neighboring seat. In other words, a passenger can sit in a seat with index $i$ ($1 \le i \le n$) only if at least one of the seats with indices $i-1$ or $i+1$ is occupied.

Today, $n$ passengers boarded the bus. The array $a$ chronologically records the seat numbers they occupied. That is, $a_1$ contains the seat number where the first passenger sat, $a_2$ â€” the seat number where the second passenger sat, and so on.

You know the contents of the array $a$. Determine whether all passengers followed the recommendations.

For example, if $n = 5$, and $a$ = \[$5, 4, 2, 1, 3$\], then the recommendations were not followed, as the $3$\-rd passenger sat in seat number $2$, while the neighboring seats with numbers $1$ and $3$ were free.

The main function of the solution is defined as:  
```cpp
class Solution {
public:
    string solve(int &n, vector<int> &a) {   
        // write your code here
    }
};
```
where:  
- If all passengers followed the recommendations, return "YES", otherwise return "NO"

# Example 1:  
- Input:  
n = 5
a = [5, 4, 2, 1, 3]
- Output:  
NO

# Constraints:  
- $1 \leq n \leq 1000000$
- $1 \leq a[i] \leq n$ 
- All seat numbers are unique
- Time limit: 1000 ms  
- Memory limit: 640 KB  