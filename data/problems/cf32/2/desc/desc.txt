# Problem Statement
You are given a tree$^{\dagger}$. In one zelda-operation you can do follows:
-   Choose two vertices of the tree $u$ and $v$;
-   Compress all the vertices on the path from $u$ to $v$ into one vertex. In other words, all the vertices on path from $u$ to $v$ will be erased from the tree, a new vertex $w$ will be created. Then every vertex $s$ that had an edge to some vertex on the path from $u$ to $v$ will have an edge to the vertex $w$.

Determine the minimum number of zelda-operations required for the tree to have only one vertex.

$^{\dagger}$A tree is a connected acyclic undirected graph.

The main function of the solution is defined as:  
```cpp
class Solution {
public:
    int solve(int n, vector<pair<int, int>> &edges) {   
        // write your code here
    }
};
```
where:  
- `n` is the number of vertices
- `edges` is the array of edges (u, v)
- Return the minimum number of zelda-operations

# Example 1:  
- Input:  
n = 4
edges = [(1, 2), (1, 3), (3, 4)]
- Output:  
1

# Constraints:  
- $2 \leq n \leq 100000$  
- Time limit: 1000 ms  
- Memory limit: 640 KB  