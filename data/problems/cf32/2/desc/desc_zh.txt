# 题面
你得到了一棵树 $^{\dagger}$ 。在一次塞尔达操作中，您可以完成以下任务：

- 在树的 $u$ 和 $v$ 中选择两个顶点；
- 将 $u$ 到 $v$ 路径上的所有顶点压缩为一个顶点。换句话说，从 $u$ 到 $v$ 路径上的所有顶点都将从树中删除，并创建一个新的顶点 $w$ 。然后，在从 $u$ 到 $v$ 的路径上与某个顶点有边连接的每个顶点 $s$ 将与顶点 $w$ 有边连接。

请计算该树只有一个顶点所需的最少塞尔达操作次数。

$^{\dagger}$ 一棵树是一个连通的非循环无向图。

solution的主函数如下：  
```cpp
class Solution {
public:
    int solve(int n, vector<pair<int, int>> &edges) {   
        // write your code here
    }
};
```
其中：  
- `n` 是顶点数
- `edges` 是边(u,v)的数组
- 返回最少的塞尔达操作次数

# 示例 1：  
- 输入：  
n = 4
edges = [(1, 2), (1, 3), (3, 4)]
- 输出：  
1

# 约束条件：  
- $2 \leq n \leq 100000$  
- 时间限制：1000 ms  
- 内存限制：640 KB  