# 题面
Monocarp 收集稀有杂志已经有一段时间了，现在他决定出售这些杂志。他把杂志分装在 $n$ 个盒子里，排成一排。其中 $i$ 个盒子里装了 $a_i$ 本杂志。有些盒子有盖子，有些没有。

突然下起了雨，现在 Monocarp 必须尽可能多地把杂志从雨中救出来。为此，他可以在盒子之间移动盖子：如果 $i$ \-th盒子最初盖有盖子，他可以把盖子从 $i$ \-th盒子移到 $(i-1)$ 盒子（如果存在的话），或者把盖子保留在 $i$ \-th盒子上。您可以假设 Monocarp 可以在同一时刻瞬间移动盖子，而且任何盖子都不能被移动超过一次。如果箱子在 Monocarp 移动盖子后盖上了盖子，那么里面的杂志就不会被雨淋湿，否则就会被浸湿。

您必须计算 Monocarp 能从雨中保存的杂志的最大数量。

solution的主函数如下：  
```cpp
class Solution {
public:
    int solve(int &n, string &s, vector<int> &a) {   
        // write your code here
    }
};
```
其中：  
- `n` 是一个整数，表示盒子的数量。
- `s` 是一个字符串，表示盒子的状态。如果第 $i$ 个盒子有盖子，则 $s[i] = '1'$，否则 $s[i] = '0'$。
- `a` 是一个整数数组，表示每个盒子里的杂志数量。
- 返回值是一个整数，表示 Monocarp 能从雨中保存的杂志的最大数量。

# 示例 1  
- 输入：  
n = 4
s = "0111"
a = [5, 4, 5, 1]
- 输出：  
14

# 约束条件  
- $1 \leq n \leq 100000$
- $1 \leq a[i] \leq 10^4$
- 时间限制：1000 ms  
- 内存限制：64 KB  