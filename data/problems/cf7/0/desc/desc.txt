# Problem Statement
Monocarp has been collecting rare magazines for quite a while, and now he has decided to sell them. He distributed the magazines between $n$ boxes, arranged in a row. The $i$\-th box contains $a_i$ magazines. Some of the boxes are covered with lids, others are not.

Suddenly it started to rain, and now Monocarp has to save as many magazines from the rain as possible. To do this, he can move the lids between boxes as follows: if the $i$\-th box was covered with a lid initially, he can either move the lid from the $i$\-th box to the box $(i-1)$ (if it exists), or keep the lid on the $i$\-th box. You may assume that Monocarp can move the lids instantly at the same moment, and no lid can be moved more than once. If a box will be covered with a lid after Monocarp moves the lids, the magazines in it will be safe from the rain; otherwise they will soak.

You have to calculate the maximum number of magazines Monocarp can save from the rain.

The main function of the solution is defined as: 
```cpp
class Solution {
public:
    int solve(int &n, string &s, vector<int> &a) {   
        // write your code here
    }
};
```
Where:  
- `n` is an integer representing the number of boxes.  
- `s` is a string, where $s[i] = 1$ if the $i$-th box is covered with a lid, and $s[i] = 0$ otherwise.
- `a` is an integer array, where $a[i]$ is the number of magazines in the $i$-th box.
- The function should return an integer, representing the maximum number of magazines Monocarp can save from the rain.

# Example 1
- Input:  
n = 4  
s = "0111"  
a = [5, 4, 5, 1]
- Output:  
14

# Constraints:
- $1 \leq n \leq 100000$  
- $1 \leq a[i] \leq 10^4$  
- Time limit: 1000 ms  
- Memory limit: 6400 KB