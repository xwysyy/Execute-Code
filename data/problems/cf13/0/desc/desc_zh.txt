# 题面
给你一个长度为 $n$ 的二进制数组 $^{\dagger}$ 。你可以对数组进行一次操作**，最多一次**。在操作中，你可以选择任意一个元素并翻转它：将 $0$ 变成 $1$ 或反之亦然。

在进行了最多一次**操作后，数组的最大反转数 $^{\ddagger}$ 是多少？

$^\dagger$ 二进制数组是只包含 0 和 1 的数组。

$^\ddagger$ 数组中的反转数是 $i,j$ 中 $i< j$ 和 $a_i > a_j$ 的索引对的个数。

solution的主函数如下：  
```cpp
class Solution {
public:
    long long solve(int &n, vector<int> &a) {   
        // write your code here
    }
};
```
其中：  
- `n` 表示数组的长度。
- `a` 是一个长度为 `n` 的数组。
- 函数应该返回一个64位整数，表示数组的最大反转数。

# 示例 1  
- 输入：  
n = 4
a = [1,0,1,0]
- 输出：  
3

# 约束条件  
- $1 \leq n \leq 100000$
- $0 \leq a_i \leq 1$
- 时间限制：1000 ms  
- 内存限制：6400 KB  