# Problem Statement

You have an array of integers $a$ of length $n$. You can apply the following operation to the given array:

-   Swap two elements $a_i$ and $a_j$ such that $i \neq j$, $a_i$ and $a_j$ are either **both** even or **both** odd.

Determine whether it is possible to sort the array in non-decreasing order by performing the operation any number of times (possibly zero).

For example, let $a$ = \[$7, 10, 1, 3, 2$\]. Then we can perform $3$ operations to sort the array:

1.  Swap $a_3 = 1$ and $a_1 = 7$, since $1$ and $7$ are odd. We get $a$ = \[$1, 10, 7, 3, 2$\];
2.  Swap $a_2 = 10$ and $a_5 = 2$, since $10$ and $2$ are even. We get $a$ = \[$1, 2, 7, 3, 10$\];
3.  Swap $a_4 = 3$ and $a_3 = 7$, since $3$ and $7$ are odd. We get $a$ = \[$1, 2, 3, 7, 10$\].

The main function of the solution is defined as:  
```cpp
class Solution {
public:
    string solve(int &n, vector<int> &a) {   
        // write your code here
    }
};
```
where:  
- Return value: Returns "YES" or "NO", indicating whether the array can be sorted in non-decreasing order.

# Example 1:  
- Input:  
n = 5
a = [6, 6, 4, 1, 6]
- Output:  
"NO"

# Constraints:  
- $1 \leq n \leq 100000$  
- $1 \leq a[i] \leq 10^9$  
- Time limit: 1000 ms  
- Memory limit: 640 KB  