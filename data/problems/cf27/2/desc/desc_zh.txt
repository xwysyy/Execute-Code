# 题面
有一个长度为 $n$ 的整数数组 $a$ 。您可以对给定的数组进行以下操作：

- 将两个元素 $a_i$ 和 $a_j$ 互换，使得 $i \neq j$ 、 $a_i$ 和 $a_j$ 要么 ** 都是偶数，要么 ** 都是奇数。

确定是否有可能通过执行任意次数（可能为零）的操作对数组进行非递减排序。

例如，让 $a$ = \[ $7, 10, 1, 3, 2$ \]。那么我们可以执行 $3$ 次操作来对数组排序：

1.  交换 $a_3 = 1$ 和 $a_1 = 7$ ，因为 $1$ 和 $7$ 都是奇数。我们得到 $a$ = \[ $1, 10, 7, 3, 2$ \]；
2.  交换 $a_2 = 10$ 和 $a_5 = 2$ ，因为 $10$ 和 $2$ 是偶数。得到 $a$ = \[ $1, 2, 7, 3, 10$ \]；
3.  交换 $a_4 = 3$ 和 $a_3 = 7$ ，因为 $3$ 和 $7$ 是奇数。我们得到 $a$ = \[ $1, 2, 3, 7, 10$ \]。

solution的主函数如下：  
```cpp
class Solution {
public:
    string solve(int &n, vector<int> &a) {   
        // write your code here
    }
};
```
其中：  
- 返回值：返回 "YES" 或 "NO"，表示是否可以对数组进行非递减排序。

# 示例 1：  
- 输入：  
n = 5
a = [6, 6, 4, 1, 6]
- 输出：  
"NO"

# 约束条件：  
- $1 \leq n \leq 100000$  
- $1 \leq a[i] \leq 10^9$ 
- 时间限制：1000 ms  
- 内存限制：640 KB  