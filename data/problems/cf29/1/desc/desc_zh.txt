# 题面
卢卡面前有一排 $n$ 棵树。第 $i$ 棵树结了 $a_i$ 个果，树高 $h_i$ 。

他想从数组 $[h_l, h_{l+1}, \dots, h_r]$ 中选择一个连续的子数组，使得每棵 $i$ ( $l \leq i < r$ ) 的果实的高度为 $h_i$ 。 $l \leq i < r$ ）中，** $h_i$ 能被 $h_{i+1}$ 整除 $^{\dagger}$ **。他将收集子数组中每棵树上的所有果实（即收集 $a_l + a_{l+1} + \dots + a_r$ 个果实）。但是，如果他收集的水果总数超过 $k$ 个，他就会被抓。

为了不被抓住，卢卡可以选择的子数组的最大长度是多少？

$^{\dagger}$ 如果比值 $\frac{x}{y}$ 是整数，那么 $x$ 可以被 $y$ 整除。

solution的主函数如下：  
```cpp
class Solution {
public:
    int solve(int &n, int &k, vector<int> &a, vector<int> &h) {   
        // write your code here
    }
};
```
其中：  
- `n` 是树的数量, `k` 是最大水果数
- `a` 是果实数量数组, `h` 是树高度数组
- 返回最大长度

# 示例 1：  
- 输入：  
n = 5, k = 12
a = [3, 2, 4, 1, 8]
h = [4, 4, 2, 4, 1]
- 输出：  
3

# 约束条件：  
- $1 \leq n \leq 100000$  
- $1 \leq a[i], h[i] \leq 10^3$  
- $1 \leq k \leq 10^9$  
- 时间限制：1000 ms  
- 内存限制：640 KB  