# 题面
鲁道夫和伯纳德决定和朋友们玩一个游戏。 $n$ 人站成一圈，开始互相扔球。他们按顺时针顺序从 $1$ 到 $n$ 依次编号。

让我们把球从一个人向他的邻居移动称为过渡。转换可以顺时针或逆时针进行。

我们把从棋手 $y_1$ 到棋手 $y_2$ 的顺时针（逆时针）距离称为从棋手 $y_1$ 到棋手 $y_2$ 所需的顺时针（逆时针）转换次数。例如，如果是 $n=7$ ，那么从 $2$ 到 $5$ 的顺时针距离是 $3$ ，而从 $2$ 到 $5$ 的逆时针距离是 $4$ 。

最初，球在编号为 $x$ 的棋手处（棋手按顺时针方向编号）。在 $i$ 次移动中，带球的人顺时针或逆时针将球抛出 $r_i$ （ $1 \le r_i \le n - 1$ ）的距离。例如，如果有 $7$ 名球员，第 $2$ 名球员接球后将球抛出 $5$ 远，那么球将被第 $7$ 名球员（顺时针抛球）或第 $4$ 名球员（逆时针抛球）接住。

由于下雨，比赛在 $m$ 次投掷后中断。雨停后，大家又聚在一起继续比赛。但是，没有人记得球在谁手里。结果，伯纳德记住了每次投掷的距离和****次投掷的方向（顺时针或逆时针）。

鲁道夫请你帮助他，根据伯纳德提供的信息，计算出 $m$ 次抛球后可能拿到球的球员人数。

solution的主函数如下：  
```cpp
class Solution {
public:
    int solve(int &n, int &m, int &x, vector<pair<int, char>> &a) {   
        // write your code here
    }
};
```
其中：  
- `n`：球员人数, `m`：抛球次数, `x`：初始拿球球员编号
- `a`：每次抛球的距离和方向，`a[i].first`表示第 $i$ 次抛球的距离，`a[i].second`表示第 $i$ 次抛球的方向，`a[i].second`为 '0' 表示顺时针，`a[i].second`为 '1' 表示逆时针, '?' 表示未知
- 返回值：可能拿到球的球员人数

# 示例 1：  
- 输入： 
n = 6, m = 3, x = 2
a = [(2,'?'), (2,'?'), (2,'?')]
- 输出：  
3

# 约束条件：  
- $2 \leq n \leq 5000$
- $1 \leq m \leq 5000$
- $1 \leq x \leq n$
- $1 \leq a[i].first \leq n - 1$
- $a[i].second$ 为 '0' 或 '1' 或 '?'
- 时间限制：1000 ms  
- 内存限制：6400 KB  