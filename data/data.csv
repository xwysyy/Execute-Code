id,desc,desc_zh,data,time_limit,memory_limit,std,generator,test,cate,difficulty
1,"Given N, V, an array v of length N, and an array w of length N:
There are N items and a backpack with a capacity of V. Each item can only be used once.
The volume of the i-th item is v[i], and the value is w[i].
Determine which items to put into the backpack so that the total volume of these items does not exceed the backpack's capacity, and the total value is maximized. Return the maximum value.

Example 1:
Input: N = 3, V = 4, v = [4, 3, 1], w = [1, 2, 1]
Output: 2

Constraints:
0 < N, V, v[i], w[i] ≤ @data
Time limit: @time_limit ms
Memory limit: @memory_limit KB","给定N，V，长度为N的数组v和数组w
有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。
第i件物品的体积是v[i], 价值是 w[i]
求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。返回最大价值。

样例1：
Input：N = 3, V = 4, v = [4, 3, 1], w = [1, 2 ,1]
Output: 2

限制：
0<N,V,v[i],w[i]≤@data
时间限制：@time_limit ms
内存限制：@memory_limit KB

",10 100 1000,1000,6400 640 64,"class Solution
{
public:
    int solve(int N, int V, vector<int> &v, vector<int> &w)
    {
     vector<int>dp(V+1);
     for(int i=1;i<=N;i++)
         for(int j=V;j>=v[i];j--)
             dp[j]=max(dp[j],dp[j-v[i]]+w[i]);
        return dp[V];
    }
};","#include<bits/stdc++.h>
using ll = long long;

std::mt19937_64 rnd(std::chrono::steady_clock().now().time_since_epoch().count());

int rng(int l, int r) { // [l, r]
    return rnd() % (r - l + 1) + l;
}

void array(int n, int lim) { // Generates an array with n elements
    int m = lim;
    std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        a[i] = rng(1, m);
        std::cout << a[i] << "" \n""[i == n - 1];
    }
}

void cand(int m, int n) { // Generate m cands from 1 to n
    for (int i = 0; i < m; i++) {
        int l = rng(1, n);
        int r = rng(1, n);

        if (l > r) {
            std::swap(l, r);
        }

        std::cout << l << "" "" << r << ""\n"";
    }
}

void tree(int n) { // Generate a tree with n vertices
    int m = 1E9;
    for (int i = 1; i < n; i++) {
        int p = rng(0, i - 1);
        int v = rng(1, m);
        std::cout << p + 1 << "" "" << i + 1 << "" "" << v << ""\n"";
    }
}

void graph(int n, int m) {
// Generate an undirected graph with n vertices and m edges. There are no double edges or self-rings in the graph, and must be connected.
    std::vector<std::pair<int, int>> e;
    std::map<std::pair<int, int>, bool> f;

    std::cout << n << "" "" << m << ""\n"";

    for (int i = 1; i < n; i++) {
        int p = rng(0, i - 1);
        e.push_back(std::make_pair(p, i));
        f[std::make_pair(p, i)] = f[std::make_pair(i, p)] = true;
    }

    // debug(f);
    for (int i = n; i <= m; i++) {
        int x, y;
        do {
            x = rng(0, n - 1);
            y = rng(0, n - 1);
        } while (x == y || f.count(std::make_pair(x, y)));

        e.push_back(std::make_pair(x, y));
        f[std::make_pair(x, y)] = f[std::make_pair(y, x)] = true;
    }

    std::shuffle(e.begin(), e.end(), rnd);

    for (auto [x, y] : e) {
        std::cout << x + 1 << "" "" << y + 1 << ""\n"";
    }
}

int main(int argc, char* argv[]) {
    int data = std::atoi(argv[1]);
    int N = rng(1, data);
    int V = rng(1, data);
    std::cout << N << "" "" << V << ""\n"";
    array(N, data);
    array(V, data);
    return 0;
}","#include <bits/stdc++.h>
#include ""execute.h""
#include ""std.h""
using namespace std;
int main(int argc, char *argv[])
{
    catch_error(argc);

    // input
    int N, V; cin >> N >> V;
    vector<int> v, w;
    for (int i = 0; i < N; i++)
    {
        int x; cin >> x;
        v.push_back(x);
    }
    for (int i = 0; i < N; i++)
    {
        int x; cin >> x;
        w.push_back(x);
    }

    // solve
    Solution solution;
    get_usage(argv[0], argv[1]);
    set_cpu_limit();
    auto result = solution.solve(N, V, v, w);
    get_usage(argv[0], argv[1]);

    // output
    cout << result << ""\n"";

    return 0;
}",dp,easy
