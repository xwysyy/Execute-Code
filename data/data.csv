id,desc,desc_zh,data,time_limit,memory_limit,std,generator,cate,difficulty
1,"There are **N** items and a **backpack with a capacity of V**. Each item can only be used once.  

The **volume** of the i-th item is `v[i]`, and its **value** is `w[i]`.  

The problem is to determine which items to put into the backpack so that the total volume of the selected items does not exceed the backpack's capacity, and their total value is maximized.  

Output the **maximum value** that can be achieved.  

**Input**:
- The first line contains two integers, **N** and **V**.
- The next **N** lines each contain two integers, `v[i]` and `w[i]`.
- \( 0 < N, V, v[i], w[i] \leq \text{@data} \)

**Time limit**: \(\text{@time_limit} ms\)  
**Memory limit**: \(\text{@memory_limit} KB\)","有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。
第i件物品的体积是vi, 价值是 wi
求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。输出最大价值。

输入：
第一行包含两个整数, N 和 V。
接下来有 N 行，每行包含两个整数 vi 和 wi。
0<N,V,vi,wi≤@data

时间限制：@time_limit ms
内存限制：@memory_limit KB",10 100 1000,1000,6400 640 64,"#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n,m;cin>>n>>m;
    vector<int>dp(m+1);
    for(int i=1;i<=n;i++)
    {
        int v,w;cin>>v>>w;
        for(int j=m;j>=v;j--)
            dp[j]=max(dp[j],dp[j-v]+w);
    }
    cout<<dp[m]<<""\n"";
    return 0;
}","#include<bits/stdc++.h>
using ll = long long;

std::mt19937_64 rnd(std::chrono::steady_clock().now().time_since_epoch().count());

int rng(int l, int r) { // [l, r]
    return rnd() % (r - l + 1) + l;
}

void array(int n, int lim) { // Generates an array with n elements
    int m = lim;
    std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        a[i] = rng(1, m);
        std::cout << a[i] << "" \n""[i == n - 1];
    }
}

void cand(int m, int n) { // Generate m cands from 1 to n
    for (int i = 0; i < m; i++) {
        int l = rng(1, n);
        int r = rng(1, n);

        if (l > r) {
            std::swap(l, r);
        }

        std::cout << l << "" "" << r << ""\n"";
    }
}

void tree(int n) { // Generate a tree with n vertices
    int m = 1E9;
    for (int i = 1; i < n; i++) {
        int p = rng(0, i - 1);
        int v = rng(1, m);
        std::cout << p + 1 << "" "" << i + 1 << "" "" << v << ""\n"";
    }
}

void graph(int n, int m) {
// Generate an undirected graph with n vertices and m edges. There are no double edges or self-rings in the graph, and must be connected.
    std::vector<std::pair<int, int>> e;
    std::map<std::pair<int, int>, bool> f;

    std::cout << n << "" "" << m << ""\n"";

    for (int i = 1; i < n; i++) {
        int p = rng(0, i - 1);
        e.push_back(std::make_pair(p, i));
        f[std::make_pair(p, i)] = f[std::make_pair(i, p)] = true;
    }

    // debug(f);
    for (int i = n; i <= m; i++) {
        int x, y;
        do {
            x = rng(0, n - 1);
            y = rng(0, n - 1);
        } while (x == y || f.count(std::make_pair(x, y)));

        e.push_back(std::make_pair(x, y));
        f[std::make_pair(x, y)] = f[std::make_pair(y, x)] = true;
    }

    std::shuffle(e.begin(), e.end(), rnd);

    for (auto [x, y] : e) {
        std::cout << x + 1 << "" "" << y + 1 << ""\n"";
    }
}

int main(int argc, char* argv[]) {
    int data = std::atoi(argv[1]);
    int N = rng(1, data);
    int V = rng(1, data);
    std::cout << N << "" "" << V << ""\n"";
    for (int i = 0; i < N; i++) {
        array(2, data);
    }
    return 0;
}",dp,easy
2,"There are **N** items and a **backpack with a capacity of V**. Each item can only be used once.  

The **volume** of the i-th item is `v[i]`, and its **value** is `w[i]`.  

The problem is to determine which items to put into the backpack so that the total volume of the selected items does not exceed the backpack's capacity, and their total value is maximized.  

Output the **maximum value** that can be achieved.  

**Input**:
- The first line contains two integers, **N** and **V**.
- The next **N** lines each contain two integers, `v[i]` and `w[i]`.
- \( 0 < N, V, v[i], w[i] \leq \text{@data} \)

**Time limit**: \(\text{@time_limit} ms\)  
**Memory limit**: \(\text{@memory_limit} KB\)","有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。
第i件物品的体积是vi, 价值是 wi
求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。输出最大价值。

输入：
第一行包含两个整数, N 和 V。
接下来有 N 行，每行包含两个整数 vi 和 wi。
0<N,V,vi,wi≤@data

时间限制：@time_limit ms
内存限制：@memory_limit KB",10 100 1000,1000,6400 640 64,"#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n,m;cin>>n>>m;
    vector<int>dp(m+1);
    for(int i=1;i<=n;i++)
    {
        int v,w;cin>>v>>w;
        for(int j=m;j>=v;j--)
            dp[j]=max(dp[j],dp[j-v]+w);
    }
    cout<<dp[m]<<""\n"";
    return 0;
}","#include<bits/stdc++.h>
using ll = long long;

std::mt19937_64 rnd(std::chrono::steady_clock().now().time_since_epoch().count());

int rng(int l, int r) { // [l, r]
    return rnd() % (r - l + 1) + l;
}

void array(int n, int lim) { // Generates an array with n elements
    int m = lim;
    std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        a[i] = rng(1, m);
        std::cout << a[i] << "" \n""[i == n - 1];
    }
}

void cand(int m, int n) { // Generate m cands from 1 to n
    for (int i = 0; i < m; i++) {
        int l = rng(1, n);
        int r = rng(1, n);

        if (l > r) {
            std::swap(l, r);
        }

        std::cout << l << "" "" << r << ""\n"";
    }
}

void tree(int n) { // Generate a tree with n vertices
    int m = 1E9;
    for (int i = 1; i < n; i++) {
        int p = rng(0, i - 1);
        int v = rng(1, m);
        std::cout << p + 1 << "" "" << i + 1 << "" "" << v << ""\n"";
    }
}

void graph(int n, int m) {
// Generate an undirected graph with n vertices and m edges. There are no double edges or self-rings in the graph, and must be connected.
    std::vector<std::pair<int, int>> e;
    std::map<std::pair<int, int>, bool> f;

    std::cout << n << "" "" << m << ""\n"";

    for (int i = 1; i < n; i++) {
        int p = rng(0, i - 1);
        e.push_back(std::make_pair(p, i));
        f[std::make_pair(p, i)] = f[std::make_pair(i, p)] = true;
    }

    // debug(f);
    for (int i = n; i <= m; i++) {
        int x, y;
        do {
            x = rng(0, n - 1);
            y = rng(0, n - 1);
        } while (x == y || f.count(std::make_pair(x, y)));

        e.push_back(std::make_pair(x, y));
        f[std::make_pair(x, y)] = f[std::make_pair(y, x)] = true;
    }

    std::shuffle(e.begin(), e.end(), rnd);

    for (auto [x, y] : e) {
        std::cout << x + 1 << "" "" << y + 1 << ""\n"";
    }
}

int main(int argc, char* argv[]) {
    int data = std::atoi(argv[1]);
    int N = rng(1, data);
    int V = rng(1, data);
    std::cout << N << "" "" << V << ""\n"";
    for (int i = 0; i < N; i++) {
        array(2, data);
    }
    return 0;
}",dp,easy
