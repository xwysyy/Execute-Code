id,desc,desc_zh,data,time_limit,memory_limit,std,generator,test,cate,difficulty
cf1,"# Problem Statement

Polycarp has `n` coins, where the value of the \(i\)-th coin is represented as \(a[i]\). Polycarp wants to distribute all the coins into several pockets, but **no two coins with the same value can be placed in the same pocket**.

Help Polycarp determine the **minimum number of pockets** needed to distribute all the coins so that no two coins with the same value are in the same pocket.

The main function of the solution is defined as:  
`int solve(int &n, vector<int> &a)`  
where:  
- `n` is the number of coins  
- `a` is the array of coin values  
- return the minimum number of pockets needed

# Example 1:  
Input:  
```
n = 6  
a = [1, 2, 4, 3, 3, 2]
```
Output:  
```
2
```
Explanation:  
Polycarp can distribute the coins into two pockets:  
- Pocket 1: [1, 2, 3]  
- Pocket 2: [2, 3, 4]  

# Constraints:  
- \(1 \leq n \leq @data\)  
- \(1 \leq a[i] \leq 10^9\)  
- Time limit: @time_limit ms  
- Memory limit: @space_limit KB  ","# 题面
Polycarp 有 `n` 枚硬币，第 \(i\) 枚硬币的价值用 \(a[i]\) 表示。Polycarp 想将所有硬币分配到若干个口袋中，但**同一个口袋中不能放入两个价值相同的硬币**。

请帮助 Polycarp 计算出分配这些硬币所需的**最少口袋数量**，以确保同一个口袋中没有两个硬币的价值相同。

solution的主函数如下：  
`int solve(int &n, vector<int> &a)`  
其中：  
- `n` 是硬币的数量  
- `a` 是硬币的价值数组  
- 返回值是最少口袋数量

# 示例 1：  
输入：  
n = 6  
a = [1, 2, 4, 3, 3, 2]
输出：  
2

解释：  
Polycarp 可以将硬币分配到两个口袋中：  
- 口袋 1: [1, 2, 3]  
- 口袋 2: [2, 3, 4]  

# 约束条件：  
- \(1 \leq n \leq @data\)  
- \(1 \leq a[i] \leq 10^9\)  
- 时间限制：@time_limit ms  
- 内存限制：@memory_limit KB  ",1000 100000 1000000,1000,640 64 32,"class Solution
{
public:
    int solve(int &n, vector<int> &a)
    {
        sort(a.begin(), a.end());
        int ans = 0, pre = 0, cnt = 0;
        for (int i = 0; i < n; i++)
        {
            if (a[i] == pre)
            {
                cnt++;
                ans = max(ans, cnt);
            }
            else
            {
                cnt = 1;
                pre = a[i];
                ans = max(ans, cnt);
            }
        }
        return ans;
    }
};
","#include <bits/stdc++.h>

std::mt19937_64 rnd(std::chrono::steady_clock().now().time_since_epoch().count());

int rng(int l, int r)
{
    return rnd() % (r - l + 1) + l;
}

void array(int n, int lim)
{
    std::vector<int> a(n);
    for (int i = 0; i < n; i++)
    {
        if (rng(1, 10) > 3)
            a[i] = rng(1, 1000);
        else
            a[i] = rng(1, lim);
        std::cout << a[i] << "" \n""[i == n - 1];
    }
}

int main(int argc, char *argv[])
{
    int data = std::atoi(argv[1]);
    int n = rng(1, data);
    std::cout << n << ""\n"";
    array(n, 1e9);
    return 0;
}","#include <bits/stdc++.h>
#include ""execute.h""
#include ""std.h""
using namespace std;
int main(int argc, char *argv[])
{
    catch_error(argc);

    // input
    int n;cin>>n;
    vector<int>a(n);
    for(int i=0;i<n;i++)cin>>a[i];

    // solve
    Solution solution;
    get_usage(argv[0], argv[1]);
    set_cpu_limit();
    auto result = solution.solve(n,a);
    get_usage(argv[0], argv[1]);

    // output
    cout << result << ""\n"";

    return 0;
}",greedy,easy
other1,"# Problem Statement

Given \(N\), \(V\), an array \(v\) of length \(N\) representing the volume of items, and an array \(w\) of length \(N\) representing the value of items:  
There are \(N\) items and a backpack with a capacity of \(V\). Each item can only be used once.  
The \(i\)-th item has a volume of \(v[i]\) and a value of \(w[i]\).  

Determine which items to put in the backpack such that the **total volume does not exceed the backpack's capacity** and the **total value is maximized**. Return the maximum total value.

The solution's main function is:  
`int solve(int &N, int &V, vector<int> &v, vector<int> &w)`  
where:  
- `N` is the number of items,  
- `V` is the capacity of the backpack,  
- `v` is the array of item volumes,  
- `w` is the array of item values.  

# Example 1  
Input:  
```
N = 3  
V = 4  
v = [4, 3, 1]  
w = [1, 2, 1]  
```  
Output:  
```
2
```

Explanation:  
The maximum value of items that can be put in the backpack is 2. One optimal selection is:  
- Take the item with volume \(v[2] = 3\) and value \(w[2] = 2\).  

# Constraints:  
- \(0 < N, V, v[i], w[i] \leq @data\)  
- Time limit: @time_limit ms  
- Memory limit: @space_limit KB  ","# 问题描述

给定 \(N\)、\(V\)、长度为 \(N\) 的数组 \(v\) 表示物品体积，以及数组 \(w\) 表示物品价值：  
有 \(N\) 件物品和一个容量为 \(V\) 的背包。每件物品只能使用一次。  
第 \(i\) 件物品的体积是 \(v[i]\)，价值是 \(w[i]\)。  

求解将哪些物品装入背包，可以使这些物品的**总体积不超过背包容量**，且**总价值最大**。返回最大总价值。

solution的主函数为：  
`int solve(int &N, int &V, vector<int> &v, vector<int> &w)`  
其中：  
- `N` 是物品的数量，  
- `V` 是背包的容量，  
- `v` 是物品体积的数组，  
- `w` 是物品价值的数组。  

# 示例 1  
输入：  
```
N = 3  
V = 4  
v = [4, 3, 1]  
w = [1, 2, 1]  
```  
输出：  
```
2
```

解释：  
可以装入背包的物品最大总价值为 2。一种最优选择是：  
- 选择体积为 \(v[2] = 3\)，价值为 \(w[2] = 2\) 的物品。  

# 约束条件  
- \(0 < N, V, v[i], w[i] \leq @data\)  
- 时间限制：@time_limit ms  
- 内存限制：@memory_limit KB  ",10 100 1000,1000,6400 640 64,"class Solution
{
public:
    int solve(int &N, int &V, vector<int> &v, vector<int> &w)
    {
        vector<int>dp(V+1);
        for(int i=0;i<N;i++)
            for(int j=V;j>=v[i];j--)
                dp[j]=max(dp[j],dp[j-v[i]]+w[i]);
        return dp[V];
    }
};","#include<bits/stdc++.h>
using ll = long long;

std::mt19937_64 rnd(std::chrono::steady_clock().now().time_since_epoch().count());

int rng(int l, int r) { // [l, r]
    return rnd() % (r - l + 1) + l;
}

void array(int n, int lim) { // Generates an array with n elements
    int m = lim;
    std::vector<int> a(n);
    for (int i = 0; i < n; i++) {
        a[i] = rng(1, m);
        std::cout << a[i] << "" \n""[i == n - 1];
    }
}

int main(int argc, char* argv[]) {
    int data = std::atoi(argv[1]);
    int N = rng(1, data);
    int V = rng(1, data);
    std::cout << N << "" "" << V << ""\n"";
    array(N, data);
    array(V, data);
    return 0;
}","#include <bits/stdc++.h>
#include ""execute.h""
#include ""std.h""
using namespace std;
int main(int argc, char *argv[])
{
    catch_error(argc);

    // input
    int N, V; cin >> N >> V;
    vector<int> v, w;
    for (int i = 0; i < N; i++)
    {
        int x; cin >> x;
        v.push_back(x);
    }
    for (int i = 0; i < N; i++)
    {
        int x; cin >> x;
        w.push_back(x);
    }

    // solve
    Solution solution;
    get_usage(argv[0], argv[1]);
    set_cpu_limit();
    auto result = solution.solve(N, V, v, w);
    get_usage(argv[0], argv[1]);

    // output
    cout << result << ""\n"";

    return 0;
}",dp,easy
